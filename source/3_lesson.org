#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:AUTHOR num:1 creator:AUTHOR timestamp:nil toc:nil html-style:nil
#+TITLE:SQL Zoo
#+AUTHOR: A Stout

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/digixc/8-CS-Database">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="homework.html">Homework</a></>
      <li><a href="evaluation.html">Evaluation</a></li>

    </ul>
  </div>
#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END

* Learning Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:      
** Objectives 
:PROPERTIES:
:HTML_CONTAINER_CLASS: learning
:END:      
In this lesson you will develop an understanding of the learning strand *Data and data representation* on your progress ladder, working towards blue/indigo level.
- How to *Query* data on one table using a *typical query language*.
- How data can be *structured* in multiple tables to make it useful
- The term *Primary Key* as a unique identifier for each *record*.
- How to select and use the correct *data type* for a field.

* SQL - Structured Query Language
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It 
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END: 
- SQL is an abbreviation for structured query language, and pronounced either "see-kwell" or as separate letters.
- The original version called SEQUEL (structured English query language) was designed by an IBM research centre in 1974 and 1975. 
- SQL is a standardized query language for requesting information from a database. 
- Query is another word for question in essence we are asking the Database a question.
- Let's look at its structure
#+BEGIN_SRC 

SELECT field(s) FROM table(s)

Select and From are in uppercase, representing the fact that they are commands and therefore 
do not change. Field and table are lowercase representing the section that depends upon the 
Database in question.

Example - A School Database

SELECT First_Name,Last_Name,Grades FROM Exams.

First_Name, Last_Name and Grades are the fields that we are interested in obtaining the 
records for. Exams is the Table that contains all of the records for students who have 
taken their GCSE's.

Running this command will list all the student's names and their grades. This isn't exactly
helpful as we haven't listed the subjects, so we won't know which grades apply for which subjects.
A better approach would be to include subjects and then GROUP the subjects or students together.
Let's look how we do this by taking a trip to the SQL Zoo. 

#+END_SRC
- Click on the following link to take a trip to SQL Zoo.
- The Website looks like this.

[[./img/SQLZoo.png]]

- *Think*, *Pair*, *Share:* we will work through the first question of the first tutorial as a group. Let's start by having an attempt at the question yourself.
- If you get stuck, share your thoughts with the person next to you first, and then be ready to share your findings with the class.
- Click Here [[https://sqlzoo.net/]]

** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: silver
:END:
*Learning Strand: Data and Data Representation*
- Finish the questions for the first Tutorial *0 SELECT - Basics* and the move on.
- Complete the next Tutorial *1 SELECT - name* 
- Ensure you have completed *both* Tutorials, capturing evidence that you have completed the tasks using the snip-it tool. 
- Submit all of your evidence on the BourneToLearn website.

** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: gold
:END:
*Learning Strand: Data and Data Representation*
- Research why data is split over a range of tables using a technique known as *Normalisation*
- What are the benefits of *Normalisation* and why was it important in the 1970's and 1980's?
- What was the Millennium bug?
- How did storing a *date* as 3 bytes instead of 4 bytes cause the Millennium bug?
- Write your answers to the questions above in your favourite text editor and submit your work to the BourneToLearn Website.

** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: platinum
:END:
*Learning Strand: Data and Data Representation*
- Research the term foreign key in relation to Databases.
- In order to combine data together from multiple tables we have to join them up using the foreign keys as a guide.
- Research *how to join a table using SQL* reading through guidance carefully.
- Complete the *6 JOIN* Tutorial on the SQLZoo website.
- Achievement Point awarded for all 3 badges awarded.
